{% load staticfiles %}
<link rel="stylesheet" type="text/css" href="{% static 'videotagger/style.css' %}"/>

<h1>{{ msg }}</h1>
<!--
<div class='video-bg'>
</div>
-->
<div>
</div>
<div class='video-overlay'>
  <video loop poster="{% static 'videotagger/images/background.jpg' %}" id="bgvid" style="position:absolute; z-index: -1; margin-left: auto; margin-right: auto;">
    <source src="{{ vidpath }}" type="video/webm">
    SOMEONE DOESN'T LIKE VIDS.
  </video>
  <canvas id='surface' width="400" height="400" style="border:2px solid #FFFFFF; margin: 0 auto;">
  </canvas>
    <br>
  <center>
    <button onclick="play()">PLAY</button>
    <button onclick="pause()">PAUSE</button>
    <button onclick="document.getElementById('bgvid').currentTime=3.25">$$$</button>
    <input id='slider' type='range' oninput='seekVideo(this.value)' min='0'>
    <button onclick="saveCurrTag()">babe</button>
  </center>
</div>
<p>{% static 'videotagger/videos/webm.webm' %}</p>
<p>{{ vidpath }}</p>
<a href="{% url 'videotagger:upload' %}">WTF AM I SQUATTING</a>
<script>
//COLOR OBJECT
function Color(r, g, b) {
  this.r = r;
  this.g = g;
  this.b = b;
}

Color.prototype.outputRgba = function(a) {
  return("rgba(" +this.r+ ", " +this.g+ ", " +this.b+ ", " +a+ ")");
}
/*
Color.prototype.assign = function(x) {
  this.r = x.r;
  this.g = x.g;
  this.b = x.b;
}
*/
//TAG OBJECT AND METHODS
function Tag(center, radius, color, thickness) {
  this.x = center.x;
  this.y = center.y;
  this.r = radius;
  this.color = color;
  this.thickness = thickness;
  this.time = 0;
}

Tag.prototype.setRad = function(newRad) { 
  this.r = newRad;
}
  
Tag.prototype.setTime = function(newTime) {
  this.time = newTime;
}

Tag.prototype.setColor = function(newColor) {
  //(this.color).assign(newColor);
  (this.color).setR(newColor.r);
  (this.color).setG(newColor.g);
  (this.color).setB(newColor.b);
}

Tag.prototype.drawTag = function(context) {
    context.beginPath()
    context.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);
    context.lineWidth = this.thickness;
    //context.strokeStyle = this.color;
    //context.strokeStyle = '#FFFFFF';
    context.strokeStyle = (this.color).outputRgba(0);
    context.stroke();
}

Tag.prototype.clearTag = function(context) {
    context.save();
    context.globalCompositeOperation = 'destination-out';
    context.beginPath();
    context.arc(this.x, this.y, this.r+(this.thickness/2)+1, 0, 2 * Math.PI, false);
    context.fill();
    context.restore();
}

function redrawTags() {
    tags.forEach(function(entry) {entry.drawTag(context);});
}
  
function saveCurrTag() {
  var confirmedColor = new Color('88', '88', '88');
  currTag.setColor(confirmedColor);
 
  tags.push(currTag);
  currTag.clearTag(context);
  redrawTags();
}


function getDist(a, b) {
  return Math.sqrt(Math.pow((a.x-b.x),2)+Math.pow((a.y-b.y),2));
  //return "lol";
}

//VIDEO FUNCTIONS
  
function seekVideo(x) {
  document.getElementById('bgvid').currentTime=x;
}

function play() {
  document.getElementById('bgvid').play();
  playing = true;
}

function pause() {
  document.getElementById('bgvid').pause();
  playing = false;
}

function writeMessage(canvas, message) {
  var context = canvas.getContext('2d');
  context.clearRect(0, 0, 200, 100);
  context.font = '8pt Calibri';
  context.fillStyle = '#7FFF00';
  context.fillText(message, 10, 25);
}

function getMousePos(canvas, evt) {
  var rect = canvas.getBoundingClientRect();
  return {
    x: evt.clientX - rect.left,
    y: evt.clientY - rect.top
  };
}

//GLOBALS
var canvas = document.getElementById('surface');
var context = canvas.getContext('2d');
context.fillStyle = '#7FFF00';
var lineThickness = 10;
var playing = false;
var dragging = false;
var currTag = new Tag({x:0, y:0}, 1, dragColor, 0);
var initPos;
var currPos;
var tags = [];
var dragColor = new Color('FF', 'FF', 'FF');
//var dragColor = '#FFFFFF';
//var confirmedColor = '#888888';

document.getElementById('bgvid').onloadedmetadata = function() {
  canvas.width=document.getElementById('bgvid').videoWidth;
  canvas.height=document.getElementById('bgvid').videoHeight;
};

document.getElementById('slider').max=Math.floor(document.getElementById('bgvid').duration);

function resizeSel(evt) {
  if (dragging) {
    currPos = getMousePos(canvas, evt);
    var dist = getDist(initPos, currPos)
    currTag.clearTag(context);
    redrawTags();
    currTag.setRad(dist);
    currTag.drawTag(context);
  }
}
canvas.addEventListener('mousedown', function(evt) {
  if (!playing)
  {
    dragging = true;
    currTag.clearTag(context);
    initPos = getMousePos(canvas, evt);
    currTag = new Tag(initPos, 1, dragColor, 10);
    currTag.setTime = document.getElementById('bgvid').currentTime;
  }
});
canvas.addEventListener('mouseup', function() {
  dragging = false;
});
canvas.addEventListener('mousemove', resizeSel);

</script>
<script src="{% static 'videotagger/javascript/tagger.js' %}"></script>

